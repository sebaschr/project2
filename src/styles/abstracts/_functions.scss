@use "variables";
@use "sass:math";

@function slice($list, $start: 1, $end: length($list)) {
  @if length($list) < 1 or $start > $end {
    @return ();
  }

  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}

@function noop() {
}

@function im-log($message) {
  @if feature-exists("at-error") {
    @error $message;
  } @else {
    @warn $message;
    $_: noop();
  }

  @return $message;
}

@function to-length($value, $unit) {
  $units: (
    "px": 1px,
    "%": 1%,
    "em": 1em,
    "rem": 1rem,
    "vw": 1vw,
    "vh": 1vh,
    "vmin": 1vmin,
    "vmax": 1vmax,
  );

  @if not index(map-keys($units), $unit) {
    $_: im-log("Invalid unit `#{$unit}`.");
  }

  @return $value * map-get($units, $unit);
}

@function to-number($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    $_: im-log("Value for `to-number` should be a number or a string.");
  }

  $first-character: str-slice($value, 1, 1);
  $result: 0;
  $digits: 0;
  $minus: ($first-character == "-");
  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  );

  // Remove +/- sign if present at first character
  @if ($first-character == "+" or $first-character == "-") {
    $value: str-slice($value, 2);
  }

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not(index(map-keys($numbers), $character) or $character == ".") {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == "." {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

@function rem($size) {
  $remSize: math.div($size, $root-font-size);
  $remRounded: math.div(round($remSize * 1000), 1000);

  @return #{$remRounded}rem;
}
